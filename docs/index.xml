<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on wangjd&#39;s blog</title>
    <link>https://wantmoretime.github.io/wjdsite/</link>
    <description>Recent content in Home on wangjd&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Jan 2020 11:19:37 +0800</lastBuildDate>
    
	<atom:link href="https://wantmoretime.github.io/wjdsite/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The C&#43;&#43; Object Model</title>
      <link>https://wantmoretime.github.io/wjdsite/c&#43;&#43;/c&#43;&#43;_object_model/</link>
      <pubDate>Fri, 17 Jan 2020 15:20:00 +0800</pubDate>
      
      <guid>https://wantmoretime.github.io/wjdsite/c&#43;&#43;/c&#43;&#43;_object_model/</guid>
      <description></description>
    </item>
    
    <item>
      <title>缓存队列</title>
      <link>https://wantmoretime.github.io/wjdsite/c&#43;&#43;/cache_queue/</link>
      <pubDate>Wed, 15 Jan 2020 10:38:08 +0800</pubDate>
      
      <guid>https://wantmoretime.github.io/wjdsite/c&#43;&#43;/cache_queue/</guid>
      <description>&lt;p&gt;使用缓存队列接收消息，避免高并发时消息漏接丢失的情况，提供一种消息缓冲的机制，还可以将消息进行统一分发处理，方便管理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>docker简单使用</title>
      <link>https://wantmoretime.github.io/wjdsite/tool/docker/</link>
      <pubDate>Tue, 14 Jan 2020 17:25:08 +0800</pubDate>
      
      <guid>https://wantmoretime.github.io/wjdsite/tool/docker/</guid>
      <description>&lt;p&gt;docker的一次简单使用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43;读写文件</title>
      <link>https://wantmoretime.github.io/wjdsite/c&#43;&#43;/rw_file/</link>
      <pubDate>Fri, 10 Jan 2020 14:31:16 +0800</pubDate>
      
      <guid>https://wantmoretime.github.io/wjdsite/c&#43;&#43;/rw_file/</guid>
      <description>最近需要在arm_linux环境编译运行程序，许多c++特性用不了，重新回顾一下c/c++的知识。 读写文件 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string&amp;gt;#include &amp;lt;iostream&amp;gt;using namespace std; #define RFILENAME &amp;#34;1.txt&amp;#34;#define WFILENAME &amp;#34;2.txt&amp;#34; int main() { //</description>
    </item>
    
    <item>
      <title>C&#43;&#43;单例模式</title>
      <link>https://wantmoretime.github.io/wjdsite/c&#43;&#43;/c&#43;&#43;_sington_template/</link>
      <pubDate>Thu, 09 Jan 2020 11:40:27 +0800</pubDate>
      
      <guid>https://wantmoretime.github.io/wjdsite/c&#43;&#43;/c&#43;&#43;_sington_template/</guid>
      <description>单例模式用于保证系统里面一个类最多只能存在一个实例，例如缓冲池、数据库连接池、线程池、应用服务实例等。 饿汉式 class Singleton { public: static Singleton &amp;amp;get_instance() { static Singleton instance; return instance; } private: Singleton()</description>
    </item>
    
    <item>
      <title>GDB调试</title>
      <link>https://wantmoretime.github.io/wjdsite/tool/gdb/</link>
      <pubDate>Wed, 08 Jan 2020 21:16:30 +0800</pubDate>
      
      <guid>https://wantmoretime.github.io/wjdsite/tool/gdb/</guid>
      <description>&lt;p&gt;在Linux下开发C/C++程序，GDB调试的一项必须熟练掌握的技能，有助于DEBUG和提高开发效率。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>线程锁</title>
      <link>https://wantmoretime.github.io/wjdsite/c&#43;&#43;/thread_lock/</link>
      <pubDate>Tue, 07 Jan 2020 14:42:34 +0800</pubDate>
      
      <guid>https://wantmoretime.github.io/wjdsite/c&#43;&#43;/thread_lock/</guid>
      <description>&lt;p&gt;多线程程序中，一般可能“同时发生多个写操作”或“同时发生读写操作”的情况时，必须加锁。如果只是同时发生多个读操作没有写操作的话，不需要加锁。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;函数指针</title>
      <link>https://wantmoretime.github.io/wjdsite/c&#43;&#43;/function_pointers/</link>
      <pubDate>Mon, 06 Jan 2020 20:38:00 +0800</pubDate>
      
      <guid>https://wantmoretime.github.io/wjdsite/c&#43;&#43;/function_pointers/</guid>
      <description>&lt;p&gt;C++函数指针以及map管理函数指针的应用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11 emplace相关函数</title>
      <link>https://wantmoretime.github.io/wjdsite/c&#43;&#43;/emplace_back/</link>
      <pubDate>Sun, 05 Jan 2020 17:32:29 +0800</pubDate>
      
      <guid>https://wantmoretime.github.io/wjdsite/c&#43;&#43;/emplace_back/</guid>
      <description>&lt;p&gt;C++11中，顺序容器(如vector、deque、list)，新标准引入了三个新成员：emplace_front、emplace和emplace_back代替push_front、insert和push_back，可提高效率。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Github&#43;Hugo搭建个人博客网站</title>
      <link>https://wantmoretime.github.io/wjdsite/go/github&#43;hugo_build_myblog/</link>
      <pubDate>Sat, 04 Jan 2020 18:38:29 +0800</pubDate>
      
      <guid>https://wantmoretime.github.io/wjdsite/go/github&#43;hugo_build_myblog/</guid>
      <description>&lt;p&gt;本篇blog主要介绍使用Github+hugo,简单搭建个人博客。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wantmoretime.github.io/wjdsite/c&#43;&#43;/the-c&#43;&#43;-object-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wantmoretime.github.io/wjdsite/c&#43;&#43;/the-c&#43;&#43;-object-model/</guid>
      <description>The C++ Object Model [TOC]
零. 基础知识 Object-Oriented Features
 Encapsulation Inheritance Polymorphism  Data members
 nonstatic data member static data member  Member Functions
 nonstatic member function static member function virtual function  一. 构造、析构、拷贝、赋值 Constructor 有4种情况会造成编译器必须为未声明Constructor的classes合成一个default constructor。
 含有若干个带有Default Constructor的类对象成员（扩展已有的constructor） 基类带有Default Constructor的派生类（扩张已有的constructor） 带有Virtual Function的类（合成vtbl 和 vptr） 带有一个Virtua Base Class的类（合成允许虚基类在执行期存取操作的代码）  至于没有存在以上四种情况，有没有自定义constructor的class，拥有的是implicit trivial default constructor （无用的constructor），实际并没有被合成出来。
在合成的default constructor中，只有base class subobjects和member class object会被初始化，所有其他的nonstatic data member（如整型、整型指针、整型数组等）都不会被初始化。因为这些对于编译器是非必要的。
Copy Constructor 有三种情况会以一个对象作为另一个对象的初值。</description>
    </item>
    
  </channel>
</rss>